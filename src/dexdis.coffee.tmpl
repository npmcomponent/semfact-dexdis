errs =
	transaction:   'Operation not allowed during transaction'
	wrongargs:     'Wrong number of arguments'
	wrongtype:     'Operation against a key holding the wrong kind of value'
	notsupported:  'Operation not supported'
	toomuchop:     'Operation with too much operands'
	transabort:    'Transaction aborted'

storenames = ['keys', 'simple', 'hash']

storenames = ['keys', 'simple', 'hash']

class DexdisCommands
	
	constructor: (trans) ->
		@_stores = {}
		for s in storenames
			@_stores[s] = trans.objectStore s
		@onerror = ->
	
{{{commands}}}

DexdisCommands.cmds = Object.keys(DexdisCommands::).filter (x) ->
	x[0] isnt '_'

class DexdisDb
	
	# get indexeddb transaction with keys and values stores
	_transaction: (cb, mode = 'readwrite') ->
		trans = @db.transaction storenames, mode
		trans.onerror = (e) ->
			cb e if cb?
		trans

class Dexdis extends DexdisDb
	
	# execute dexdis command
	_cmd: (cmd, args, cb, mode) ->
		ret   = null
		error = null
		save = (x) ->
			ret = x
			return
		trans = @_transaction cb, mode
		trans.oncomplete = ->
			cb null, ret if cb?
		trans.onabort = ->
			if error?
				cb error
			else
				cb new Error errs.transabort
		cmds = new DexdisCommands trans
		length = cmds[cmd].length
		if length isnt 0 and args.length < length - 1
			error = new Error errs.wrongargs
			trans.abort()
			return
		cmds.onerror = (err) ->
			error = err
			trans.abort()
		cmds[cmd].apply cmds, args.concat [save]
		return
	
	select: (db, cb) ->
		if typeof db is 'function'
			cb = db
			db = 1
		r = indexedDB.open db, 1
		r.onupgradeneeded = (e) ->
			db = r.result
			for store in storenames
				db.createObjectStore store
		r.onsuccess = (e) =>
			@db = r.result
			cb null if cb?
		r.onerror = (e) ->
			cb r.error
			e.preventDefault()
		this
	
	quit: (cb) ->
		@db.close() if @db?
		cb null if cb?
		this
	
	multi: (cb) ->
		new DexdisTransaction @db
	
	for cmd in DexdisCommands.cmds
		do (cmd) =>
			@::[cmd] = (args..., cb) ->
				if typeof cb is 'function'
					@_cmd cmd, args, cb
				else
					args = args.concat [cb]
					@_cmd cmd, args, ->
				this

class DexdisTransaction extends DexdisDb
	
	constructor: (@db) ->
		@buffer = []
	
	_buffercmd: (cmd, args) ->
		@buffer.push
			cmd:  cmd
			args: args
	
	exec: (cb) ->
		trans  = @_transaction cb
		cmds   = new DexdisCommands trans
		buffer = @buffer
		i      = 0
		values = []
		next = (val) ->
			if val isnt undefined
				values.push val
			i++
			if i > buffer.length
				return
			b = buffer[i-1]
			cmds[b.cmd].apply cmds, b.args.concat [next]
		trans.oncomplete = ->
			cb null, values
		trans.onerror = (e) ->
			cb e
			e.preventDefault()
		next()
		return
	
	discard: (cb) ->
		@buffer = []
		@trans.abort()
	
	for cmd in DexdisCommands.cmds
		do (cmd) =>
			@::[cmd] = (args...) ->
				@_buffercmd cmd, args
				this
